# -*- coding: utf-8 -*-
"""cybersecurity_threat_tracker_interactive.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/132x-4cAiRpySosmdBGlBHZ9uGyOqpapl
"""

import spacy
import matplotlib.pyplot as plt
from collections import Counter

# -------------------
# Step 1: Threat Info and Prevention Tips
# -------------------
threat_info = {
    "ransomware": {
        "description": "Ransomware encrypts victim's files and demands a ransom for decryption.",
        "prevention": "Maintain regular backups, avoid clicking on suspicious links, update antivirus software."
    },
    "phishing": {
        "description": "Phishing tricks users into revealing personal information through fake emails or websites.",
        "prevention": "Use spam filters, verify senders, never share personal info through unsecured channels."
    },
    "ddos": {
        "description": "DDoS (Distributed Denial of Service) attacks overwhelm systems to cause service outages.",
        "prevention": "Use firewalls, enable rate-limiting, deploy anti-DDoS tools."
    },
    "botnets": {
        "description": "A botnet is a network of infected computers controlled remotely by hackers.",
        "prevention": "Keep software updated, avoid suspicious downloads, monitor network traffic."
    },
    "zero-day": {
        "description": "Zero-day vulnerabilities are unknown security flaws that hackers exploit before patches are released.",
        "prevention": "Keep all systems updated, use advanced threat detection tools."
    },
    "cryptojacking": {
        "description": "Cryptojacking uses someoneâ€™s computer without permission to mine cryptocurrency.",
        "prevention": "Install ad-blockers, monitor CPU usage spikes, use updated antivirus software."
    },
    "social engineering": {
        "description": "Social engineering manipulates people into revealing confidential information.",
        "prevention": "Train employees about security, verify requests, avoid sharing sensitive information."
    },
    "malware": {
        "description": "Malware is malicious software designed to damage or disable computers.",
        "prevention": "Install security software, update devices regularly, avoid suspicious files."
    },
    "deepfake attacks": {
        "description": "Deepfake attacks use AI to create convincing fake videos or audio recordings.",
        "prevention": "Use verification methods, educate employees, monitor unusual requests."
    }
}

# -------------------
# Step 2: NLP Model Setup
# -------------------
nlp = spacy.load("en_core_web_sm")

# Threat-related keywords to track
threat_keywords = list(threat_info.keys())

# Storage
user_articles = []
detected_threats = []

# -------------------
# Step 3: Functions
# -------------------
def scan_articles():
    global detected_threats
    detected_threats = []
    if not user_articles:
        print("\nNo articles available! Please add articles first.\n")
        return
    for article in user_articles:
        article_lower = article.lower()
        for threat in threat_keywords:
            if threat in article_lower:
                detected_threats.append(threat)
    if detected_threats:
        print("\nThreats detected successfully!\n")
    else:
        print("\nNo threats detected in the given articles.\n")

def show_detected_threats():
    if not detected_threats:
        print("\nNo threats detected yet. Please scan articles first.\n")
        return
    threat_counts = Counter(detected_threats)
    print("\n=== Detected Threats ===")
    for threat, count in threat_counts.items():
        print(f"{threat.title()} - {count} occurrence(s)")

def show_threat_info():
    if not detected_threats:
        print("\nNo threats detected yet. Please scan articles first.\n")
        return
    unique_threats = set(detected_threats)
    print("\n=== Threat Information ===")
    for threat in unique_threats:
        info = threat_info.get(threat)
        if info:
            print(f"\nThreat: {threat.title()}")
            print(f"Description: {info['description']}")
            print(f"Prevention Tips: {info['prevention']}")
        else:
            print(f"\nThreat: {threat.title()}")
            print("Information not available.")

def plot_threats():
    if not detected_threats:
        print("\nNo threats detected yet. Please scan articles first.\n")
        return
    threat_counts = Counter(detected_threats)
    plt.figure(figsize=(10, 6))
    plt.bar(threat_counts.keys(), threat_counts.values(), color='orange')
    plt.title('Detected Cybersecurity Threats')
    plt.xlabel('Threat Type')
    plt.ylabel('Number of Mentions')
    plt.xticks(rotation=45)
    plt.grid(axis='y')
    plt.tight_layout()
    plt.show()

def add_article():
    article = input("\nEnter the news article or cybersecurity report text:\n> ")
    user_articles.append(article)
    print("Article added successfully!\n")

def show_articles():
    if not user_articles:
        print("\nNo articles have been added yet.\n")
        return
    print("\n=== Your Added Articles ===")
    for idx, article in enumerate(user_articles, 1):
        print(f"\nArticle {idx}:\n{article}\n")

# -------------------
# Step 4: Menu Loop
# -------------------
while True:
    print("\n====== Cybersecurity Threat Tracker ======")
    print("1. Add a new article")
    print("2. Show all added articles")
    print("3. Scan articles for threats")
    print("4. Show detected threats")
    print("5. Show threat information and prevention tips")
    print("6. Plot detected threats graph")
    print("7. Exit")

    choice = input("\nEnter your choice (1-7): ")

    if choice == '1':
        add_article()
    elif choice == '2':
        show_articles()
    elif choice == '3':
        scan_articles()
    elif choice == '4':
        show_detected_threats()
    elif choice == '5':
        show_threat_info()
    elif choice == '6':
        plot_threats()
    elif choice == '7':
        print("\nThank you for using Cybersecurity Threat Tracker. Stay Safe! ðŸ‘‹")
        break
    else:
        print("\nInvalid choice. Please try again.\n")